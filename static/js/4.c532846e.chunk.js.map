{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","onAuth","props","preventDefault","switchAuthModeHnalder","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","invalid","shouldValidate","changed","loading","isAuthenticated","to","className","styles","container","error","message","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","path","input","inputElement","inputClasses","join","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.c532846e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Auth_container__3fnLb\",\"error\":\"Auth_error__3FEJx\"};","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { updateObject, checkValidity } from '../../shared/utils';\n\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport * as actions from '../../store/actions/index';\n\nimport styles from './Auth.module.css';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 8,\n                },\n                valid: false,\n                touched: false,\n            },\n        },\n        isSignup: true,\n    };\n\n    componentDidMount() {\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath('/');\n        };\n    };\n\n    inputChangedHandler = (event, controlName) => {\n        // Search and update targeted input in cloned controls form\n        const { controls } = this.state;\n        const updatedControls = updateObject(controls, {\n            [controlName]: updateObject(controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, controls[controlName].validation),\n                touched: true,\n            })\n        });\n        this.setState({ controls: updatedControls });\n    };\n\n    submitHandler = (event) => {\n        const { email, password } = this.state.controls;\n        const { isSignup } = this.state;\n        const { onAuth } = this.props;\n        event.preventDefault();\n        onAuth(email.value, password.value, isSignup);\n    };\n\n    switchAuthModeHnalder = () => {\n        this.setState(prevState => {\n            return {\n                isSignup: !prevState.isSignup,\n            }\n        });\n    };\n\n    render() {\n        const { controls } = this.state;\n        const formElementsArray = [];\n\n        for (let key in controls) {\n            formElementsArray.push({\n                id: key,\n                config: controls[key],\n            });\n        };\n\n        let form = formElementsArray.map(({ id, config }) => (\n            <Input\n                key={id}\n                elementType={config.elementType}\n                elementConfig={config.elementConfig}\n                value={config.value}\n                invalid={!config.valid}\n                touched={config.touched}\n                shouldValidate={config.validation}\n                changed={(event) => this.inputChangedHandler(event, id)} />\n        ));\n\n        if (this.props.loading) {\n            form = <Spinner />\n        };\n\n        if (this.props.isAuthenticated) {\n           return <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={styles.container}>\n                {this.props.error && (\n                    <p className={styles.error}>{this.props.error.message}</p>\n                )}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHnalder}\n                    btnType=\"Danger\">\n                        SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\n                </Button>\n            </div>\n        );\n    };\n};\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.token !== null,\n        buildingBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath,\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path)),\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n","import React from 'react';\n\nimport styles from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n\n    const inputClasses = [styles.inputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(styles.invalid);\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n    }\n\n    return (\n        <div className={styles.input}>\n            <label className={styles.label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__HkNJD\",\"label\":\"Input_label__1v20C\",\"inputElement\":\"Input_inputElement__3nNe8\",\"invalid\":\"Input_invalid__1XscM\"};"],"sourceRoot":""}