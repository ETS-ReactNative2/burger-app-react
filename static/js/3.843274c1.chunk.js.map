{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","styles","container","burgerSummary","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","token","formData","formElementIdentifier","order","price","totalPrice","orderData","userId","onOrderBurger","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","this","formElementsArray","key","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","auth","dispatch","orderActions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","CheckoutSummary","path","match","url","component","input","inputElement","inputClasses","join","onChange","option","label","module","exports"],"mappings":"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","file":"static/js/3.843274c1.chunk.js","sourcesContent":["import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\n\nimport styles from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={styles.container}>\n\n            <h1>We hope it tastes well!</h1>\n            <div className={styles.burgerSummary}>\n                <Burger ingredients={props.ingredients} />\n            </div>\n            <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button btnType=\"Success\" clicked={props.checkoutContinued}>CONTINUE</Button>\n\n        </div>\n    )\n};\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { updateObject, checkValidity } from '../../../shared/utils';\n\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nimport styles from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as orderActions from '../../../store/actions/index';\n\nclass ContactData extends Component {\n\n    state = {\n        //All inputs of the contact form for iteration\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your Name',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                },\n                valid: false,\n                touched: false,\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Mail',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                valid: false,\n                touched: false,\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        { value: 'fastest', displayValue: 'Fastest' },\n                        { value: 'cheapest', displayValue: 'Cheapest' },\n                    ]\n                },\n                value: 'fastest',\n                validation: {},\n                valid: true,\n            },\n        },\n        formIsValid: false\n    }\n\n    orderHandler = (event) => {\n        event.preventDefault();\n        const { token } = this.props;\n        const formData = {};\n\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData: formData,\n            userId: this.props.userId,\n        };\n\n        this.props.onOrderBurger(order, token);\n    };\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        // Search for targeted input in cloned orderForm\n        const { orderForm } = this.state;\n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\n            touched: true,\n        });\n        const updatedOrderForm = updateObject(orderForm, {\n            [inputIdentifier]: updatedFormElement,\n        });\n\n        //Check if the all inputs in the form is passed though validation\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n\n        // set inputed value to it's state as well as formIsValid property\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid });\n    };\n\n    render() {\n\n        const { orderForm, formIsValid } = this.state;\n\n        const formElementsArray = [];\n        for (let key in orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: orderForm[key]\n            })\n        };\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        touched={formElement.config.touched}\n                        shouldValidate={formElement.config.validation}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!formIsValid}>ORDER</Button>\n            </form>\n        );\n\n        if (this.props.loading) {\n            form = <Spinner />\n        }\n        return (\n            <div className={styles.container}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(orderActions.purchaseBurger(orderData, token)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler( ContactData, axios ));","import React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\n\nclass Checkout extends Component {\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace('/checkout/contact-data');\n    }\n\n    render() {\n        let summary = <Redirect to=\"/\" />\n\n        if (this.props.ingredients) {\n            const purchasedRedirect = this.props.purchased ?  <Redirect to=\"/\" /> : null;\n            summary =  <div>\n                            {purchasedRedirect}\n                            <CheckoutSummary\n                                ingredients={this.props.ingredients}\n                                checkoutCancelled={this.checkoutCancelledHandler}\n                                checkoutContinued={this.checkoutContinuedHandler} />\n                            <Route\n                                path={this.props.match.url + '/contact-data'}\n                                component={ContactData} />\n                       </div>\n        }\n\n        return summary;\n    }\n};\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        purchased: state.order.purchased,\n    }\n};\n\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\n\nimport styles from './Input.module.css';\n\nconst input = (props) => {\n\n    let inputElement = null;\n\n    const inputClasses = [styles.inputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(styles.invalid);\n    }\n\n    switch (props.elementType) {\n        case ('input'):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('textarea'):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ('select'):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />\n    }\n\n    return (\n        <div className={styles.input}>\n            <label className={styles.label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__HkNJD\",\"label\":\"Input_label__1v20C\",\"inputElement\":\"Input_inputElement__3nNe8\",\"invalid\":\"Input_invalid__1XscM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CheckoutSummary_container__3vnaF\",\"burgerSummary\":\"CheckoutSummary_burgerSummary__WgYGk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactData_container__2PlIE\"};"],"sourceRoot":""}